/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DebugImport } from './routes/debug'
import { Route as BootstrapImport } from './routes/bootstrap'
import { Route as AuthedImport } from './routes/_authed'
import { Route as AuthedIndexImport } from './routes/_authed/index'
import { Route as AuthedTeamNewImport } from './routes/_authed/team/new'
import { Route as AuthedSiteNewImport } from './routes/_authed/site/new'
import { Route as AuthedSettingsSImport } from './routes/_authed/settings/_s'
import { Route as AuthedTeamTeamIdIndexImport } from './routes/_authed/team/$teamId/index'
import { Route as AuthedSiteSiteIdIndexImport } from './routes/_authed/site/$siteId/index'
import { Route as AuthedSettingsSIndexImport } from './routes/_authed/settings/_s.index'
import { Route as AuthedTeamTeamIdSettingsImport } from './routes/_authed/team/$teamId/settings'
import { Route as AuthedTeamTeamIdMembersImport } from './routes/_authed/team/$teamId/members'
import { Route as AuthedSiteSiteIdDeploymentsImport } from './routes/_authed/site/$siteId/deployments'
import { Route as AuthedSiteSiteIdAnalyticsImport } from './routes/_authed/site/$siteId/analytics'
import { Route as AuthedSiteSiteIdSettingsSImport } from './routes/_authed/site/$siteId/settings/_s'
import { Route as AuthedSiteSiteIdSettingsSIndexImport } from './routes/_authed/site/$siteId/settings/_s.index'
import { Route as AuthedSiteSiteIdSettingsSWebhooksImport } from './routes/_authed/site/$siteId/settings/_s.webhooks'
import { Route as AuthedSiteSiteIdSettingsSTransferImport } from './routes/_authed/site/$siteId/settings/_s.transfer'
import { Route as AuthedSiteSiteIdSettingsSRulesImport } from './routes/_authed/site/$siteId/settings/_s.rules'
import { Route as AuthedSiteSiteIdSettingsSKeysImport } from './routes/_authed/site/$siteId/settings/_s.keys'
import { Route as AuthedSiteSiteIdSettingsSDomainsImport } from './routes/_authed/site/$siteId/settings/_s.domains'
import { Route as AuthedSiteSiteIdSettingsSCiImport } from './routes/_authed/site/$siteId/settings/_s.ci'
import { Route as AuthedSiteSiteIdSettingsSActionsImport } from './routes/_authed/site/$siteId/settings/_s.actions'

// Create Virtual Routes

const AuthedSettingsImport = createFileRoute('/_authed/settings')()
const AuthedSiteSiteIdSettingsImport = createFileRoute(
  '/_authed/site/$siteId/settings',
)()

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DebugRoute = DebugImport.update({
  id: '/debug',
  path: '/debug',
  getParentRoute: () => rootRoute,
} as any)

const BootstrapRoute = BootstrapImport.update({
  id: '/bootstrap',
  path: '/bootstrap',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedSettingsRoute = AuthedSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedIndexRoute = AuthedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTeamNewRoute = AuthedTeamNewImport.update({
  id: '/team/new',
  path: '/team/new',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSiteNewRoute = AuthedSiteNewImport.update({
  id: '/site/new',
  path: '/site/new',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSettingsSRoute = AuthedSettingsSImport.update({
  id: '/_s',
  getParentRoute: () => AuthedSettingsRoute,
} as any)

const AuthedSiteSiteIdSettingsRoute = AuthedSiteSiteIdSettingsImport.update({
  id: '/site/$siteId/settings',
  path: '/site/$siteId/settings',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTeamTeamIdIndexRoute = AuthedTeamTeamIdIndexImport.update({
  id: '/team/$teamId/',
  path: '/team/$teamId/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSiteSiteIdIndexRoute = AuthedSiteSiteIdIndexImport.update({
  id: '/site/$siteId/',
  path: '/site/$siteId/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSettingsSIndexRoute = AuthedSettingsSIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedSettingsSRoute,
} as any)

const AuthedTeamTeamIdSettingsRoute = AuthedTeamTeamIdSettingsImport.update({
  id: '/team/$teamId/settings',
  path: '/team/$teamId/settings',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTeamTeamIdMembersRoute = AuthedTeamTeamIdMembersImport.update({
  id: '/team/$teamId/members',
  path: '/team/$teamId/members',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSiteSiteIdDeploymentsRoute =
  AuthedSiteSiteIdDeploymentsImport.update({
    id: '/site/$siteId/deployments',
    path: '/site/$siteId/deployments',
    getParentRoute: () => AuthedRoute,
  } as any)

const AuthedSiteSiteIdAnalyticsRoute = AuthedSiteSiteIdAnalyticsImport.update({
  id: '/site/$siteId/analytics',
  path: '/site/$siteId/analytics',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSiteSiteIdSettingsSRoute = AuthedSiteSiteIdSettingsSImport.update({
  id: '/_s',
  getParentRoute: () => AuthedSiteSiteIdSettingsRoute,
} as any)

const AuthedSiteSiteIdSettingsSIndexRoute =
  AuthedSiteSiteIdSettingsSIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthedSiteSiteIdSettingsSRoute,
  } as any)

const AuthedSiteSiteIdSettingsSWebhooksRoute =
  AuthedSiteSiteIdSettingsSWebhooksImport.update({
    id: '/webhooks',
    path: '/webhooks',
    getParentRoute: () => AuthedSiteSiteIdSettingsSRoute,
  } as any)

const AuthedSiteSiteIdSettingsSTransferRoute =
  AuthedSiteSiteIdSettingsSTransferImport.update({
    id: '/transfer',
    path: '/transfer',
    getParentRoute: () => AuthedSiteSiteIdSettingsSRoute,
  } as any)

const AuthedSiteSiteIdSettingsSRulesRoute =
  AuthedSiteSiteIdSettingsSRulesImport.update({
    id: '/rules',
    path: '/rules',
    getParentRoute: () => AuthedSiteSiteIdSettingsSRoute,
  } as any)

const AuthedSiteSiteIdSettingsSKeysRoute =
  AuthedSiteSiteIdSettingsSKeysImport.update({
    id: '/keys',
    path: '/keys',
    getParentRoute: () => AuthedSiteSiteIdSettingsSRoute,
  } as any)

const AuthedSiteSiteIdSettingsSDomainsRoute =
  AuthedSiteSiteIdSettingsSDomainsImport.update({
    id: '/domains',
    path: '/domains',
    getParentRoute: () => AuthedSiteSiteIdSettingsSRoute,
  } as any)

const AuthedSiteSiteIdSettingsSCiRoute =
  AuthedSiteSiteIdSettingsSCiImport.update({
    id: '/ci',
    path: '/ci',
    getParentRoute: () => AuthedSiteSiteIdSettingsSRoute,
  } as any)

const AuthedSiteSiteIdSettingsSActionsRoute =
  AuthedSiteSiteIdSettingsSActionsImport.update({
    id: '/actions',
    path: '/actions',
    getParentRoute: () => AuthedSiteSiteIdSettingsSRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/bootstrap': {
      id: '/bootstrap'
      path: '/bootstrap'
      fullPath: '/bootstrap'
      preLoaderRoute: typeof BootstrapImport
      parentRoute: typeof rootRoute
    }
    '/debug': {
      id: '/debug'
      path: '/debug'
      fullPath: '/debug'
      preLoaderRoute: typeof DebugImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/settings': {
      id: '/_authed/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthedSettingsImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/settings/_s': {
      id: '/_authed/settings/_s'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthedSettingsSImport
      parentRoute: typeof AuthedSettingsRoute
    }
    '/_authed/site/new': {
      id: '/_authed/site/new'
      path: '/site/new'
      fullPath: '/site/new'
      preLoaderRoute: typeof AuthedSiteNewImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/team/new': {
      id: '/_authed/team/new'
      path: '/team/new'
      fullPath: '/team/new'
      preLoaderRoute: typeof AuthedTeamNewImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/site/$siteId/analytics': {
      id: '/_authed/site/$siteId/analytics'
      path: '/site/$siteId/analytics'
      fullPath: '/site/$siteId/analytics'
      preLoaderRoute: typeof AuthedSiteSiteIdAnalyticsImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/site/$siteId/deployments': {
      id: '/_authed/site/$siteId/deployments'
      path: '/site/$siteId/deployments'
      fullPath: '/site/$siteId/deployments'
      preLoaderRoute: typeof AuthedSiteSiteIdDeploymentsImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/team/$teamId/members': {
      id: '/_authed/team/$teamId/members'
      path: '/team/$teamId/members'
      fullPath: '/team/$teamId/members'
      preLoaderRoute: typeof AuthedTeamTeamIdMembersImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/team/$teamId/settings': {
      id: '/_authed/team/$teamId/settings'
      path: '/team/$teamId/settings'
      fullPath: '/team/$teamId/settings'
      preLoaderRoute: typeof AuthedTeamTeamIdSettingsImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/settings/_s/': {
      id: '/_authed/settings/_s/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof AuthedSettingsSIndexImport
      parentRoute: typeof AuthedSettingsSImport
    }
    '/_authed/site/$siteId/': {
      id: '/_authed/site/$siteId/'
      path: '/site/$siteId'
      fullPath: '/site/$siteId'
      preLoaderRoute: typeof AuthedSiteSiteIdIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/team/$teamId/': {
      id: '/_authed/team/$teamId/'
      path: '/team/$teamId'
      fullPath: '/team/$teamId'
      preLoaderRoute: typeof AuthedTeamTeamIdIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/site/$siteId/settings': {
      id: '/_authed/site/$siteId/settings'
      path: '/site/$siteId/settings'
      fullPath: '/site/$siteId/settings'
      preLoaderRoute: typeof AuthedSiteSiteIdSettingsImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/site/$siteId/settings/_s': {
      id: '/_authed/site/$siteId/settings/_s'
      path: '/site/$siteId/settings'
      fullPath: '/site/$siteId/settings'
      preLoaderRoute: typeof AuthedSiteSiteIdSettingsSImport
      parentRoute: typeof AuthedSiteSiteIdSettingsRoute
    }
    '/_authed/site/$siteId/settings/_s/actions': {
      id: '/_authed/site/$siteId/settings/_s/actions'
      path: '/actions'
      fullPath: '/site/$siteId/settings/actions'
      preLoaderRoute: typeof AuthedSiteSiteIdSettingsSActionsImport
      parentRoute: typeof AuthedSiteSiteIdSettingsSImport
    }
    '/_authed/site/$siteId/settings/_s/ci': {
      id: '/_authed/site/$siteId/settings/_s/ci'
      path: '/ci'
      fullPath: '/site/$siteId/settings/ci'
      preLoaderRoute: typeof AuthedSiteSiteIdSettingsSCiImport
      parentRoute: typeof AuthedSiteSiteIdSettingsSImport
    }
    '/_authed/site/$siteId/settings/_s/domains': {
      id: '/_authed/site/$siteId/settings/_s/domains'
      path: '/domains'
      fullPath: '/site/$siteId/settings/domains'
      preLoaderRoute: typeof AuthedSiteSiteIdSettingsSDomainsImport
      parentRoute: typeof AuthedSiteSiteIdSettingsSImport
    }
    '/_authed/site/$siteId/settings/_s/keys': {
      id: '/_authed/site/$siteId/settings/_s/keys'
      path: '/keys'
      fullPath: '/site/$siteId/settings/keys'
      preLoaderRoute: typeof AuthedSiteSiteIdSettingsSKeysImport
      parentRoute: typeof AuthedSiteSiteIdSettingsSImport
    }
    '/_authed/site/$siteId/settings/_s/rules': {
      id: '/_authed/site/$siteId/settings/_s/rules'
      path: '/rules'
      fullPath: '/site/$siteId/settings/rules'
      preLoaderRoute: typeof AuthedSiteSiteIdSettingsSRulesImport
      parentRoute: typeof AuthedSiteSiteIdSettingsSImport
    }
    '/_authed/site/$siteId/settings/_s/transfer': {
      id: '/_authed/site/$siteId/settings/_s/transfer'
      path: '/transfer'
      fullPath: '/site/$siteId/settings/transfer'
      preLoaderRoute: typeof AuthedSiteSiteIdSettingsSTransferImport
      parentRoute: typeof AuthedSiteSiteIdSettingsSImport
    }
    '/_authed/site/$siteId/settings/_s/webhooks': {
      id: '/_authed/site/$siteId/settings/_s/webhooks'
      path: '/webhooks'
      fullPath: '/site/$siteId/settings/webhooks'
      preLoaderRoute: typeof AuthedSiteSiteIdSettingsSWebhooksImport
      parentRoute: typeof AuthedSiteSiteIdSettingsSImport
    }
    '/_authed/site/$siteId/settings/_s/': {
      id: '/_authed/site/$siteId/settings/_s/'
      path: '/'
      fullPath: '/site/$siteId/settings/'
      preLoaderRoute: typeof AuthedSiteSiteIdSettingsSIndexImport
      parentRoute: typeof AuthedSiteSiteIdSettingsSImport
    }
  }
}

// Create and export the route tree

interface AuthedSettingsSRouteChildren {
  AuthedSettingsSIndexRoute: typeof AuthedSettingsSIndexRoute
}

const AuthedSettingsSRouteChildren: AuthedSettingsSRouteChildren = {
  AuthedSettingsSIndexRoute: AuthedSettingsSIndexRoute,
}

const AuthedSettingsSRouteWithChildren = AuthedSettingsSRoute._addFileChildren(
  AuthedSettingsSRouteChildren,
)

interface AuthedSettingsRouteChildren {
  AuthedSettingsSRoute: typeof AuthedSettingsSRouteWithChildren
}

const AuthedSettingsRouteChildren: AuthedSettingsRouteChildren = {
  AuthedSettingsSRoute: AuthedSettingsSRouteWithChildren,
}

const AuthedSettingsRouteWithChildren = AuthedSettingsRoute._addFileChildren(
  AuthedSettingsRouteChildren,
)

interface AuthedSiteSiteIdSettingsSRouteChildren {
  AuthedSiteSiteIdSettingsSActionsRoute: typeof AuthedSiteSiteIdSettingsSActionsRoute
  AuthedSiteSiteIdSettingsSCiRoute: typeof AuthedSiteSiteIdSettingsSCiRoute
  AuthedSiteSiteIdSettingsSDomainsRoute: typeof AuthedSiteSiteIdSettingsSDomainsRoute
  AuthedSiteSiteIdSettingsSKeysRoute: typeof AuthedSiteSiteIdSettingsSKeysRoute
  AuthedSiteSiteIdSettingsSRulesRoute: typeof AuthedSiteSiteIdSettingsSRulesRoute
  AuthedSiteSiteIdSettingsSTransferRoute: typeof AuthedSiteSiteIdSettingsSTransferRoute
  AuthedSiteSiteIdSettingsSWebhooksRoute: typeof AuthedSiteSiteIdSettingsSWebhooksRoute
  AuthedSiteSiteIdSettingsSIndexRoute: typeof AuthedSiteSiteIdSettingsSIndexRoute
}

const AuthedSiteSiteIdSettingsSRouteChildren: AuthedSiteSiteIdSettingsSRouteChildren =
  {
    AuthedSiteSiteIdSettingsSActionsRoute:
      AuthedSiteSiteIdSettingsSActionsRoute,
    AuthedSiteSiteIdSettingsSCiRoute: AuthedSiteSiteIdSettingsSCiRoute,
    AuthedSiteSiteIdSettingsSDomainsRoute:
      AuthedSiteSiteIdSettingsSDomainsRoute,
    AuthedSiteSiteIdSettingsSKeysRoute: AuthedSiteSiteIdSettingsSKeysRoute,
    AuthedSiteSiteIdSettingsSRulesRoute: AuthedSiteSiteIdSettingsSRulesRoute,
    AuthedSiteSiteIdSettingsSTransferRoute:
      AuthedSiteSiteIdSettingsSTransferRoute,
    AuthedSiteSiteIdSettingsSWebhooksRoute:
      AuthedSiteSiteIdSettingsSWebhooksRoute,
    AuthedSiteSiteIdSettingsSIndexRoute: AuthedSiteSiteIdSettingsSIndexRoute,
  }

const AuthedSiteSiteIdSettingsSRouteWithChildren =
  AuthedSiteSiteIdSettingsSRoute._addFileChildren(
    AuthedSiteSiteIdSettingsSRouteChildren,
  )

interface AuthedSiteSiteIdSettingsRouteChildren {
  AuthedSiteSiteIdSettingsSRoute: typeof AuthedSiteSiteIdSettingsSRouteWithChildren
}

const AuthedSiteSiteIdSettingsRouteChildren: AuthedSiteSiteIdSettingsRouteChildren =
  {
    AuthedSiteSiteIdSettingsSRoute: AuthedSiteSiteIdSettingsSRouteWithChildren,
  }

const AuthedSiteSiteIdSettingsRouteWithChildren =
  AuthedSiteSiteIdSettingsRoute._addFileChildren(
    AuthedSiteSiteIdSettingsRouteChildren,
  )

interface AuthedRouteChildren {
  AuthedIndexRoute: typeof AuthedIndexRoute
  AuthedSettingsRoute: typeof AuthedSettingsRouteWithChildren
  AuthedSiteNewRoute: typeof AuthedSiteNewRoute
  AuthedTeamNewRoute: typeof AuthedTeamNewRoute
  AuthedSiteSiteIdAnalyticsRoute: typeof AuthedSiteSiteIdAnalyticsRoute
  AuthedSiteSiteIdDeploymentsRoute: typeof AuthedSiteSiteIdDeploymentsRoute
  AuthedTeamTeamIdMembersRoute: typeof AuthedTeamTeamIdMembersRoute
  AuthedTeamTeamIdSettingsRoute: typeof AuthedTeamTeamIdSettingsRoute
  AuthedSiteSiteIdIndexRoute: typeof AuthedSiteSiteIdIndexRoute
  AuthedTeamTeamIdIndexRoute: typeof AuthedTeamTeamIdIndexRoute
  AuthedSiteSiteIdSettingsRoute: typeof AuthedSiteSiteIdSettingsRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedIndexRoute: AuthedIndexRoute,
  AuthedSettingsRoute: AuthedSettingsRouteWithChildren,
  AuthedSiteNewRoute: AuthedSiteNewRoute,
  AuthedTeamNewRoute: AuthedTeamNewRoute,
  AuthedSiteSiteIdAnalyticsRoute: AuthedSiteSiteIdAnalyticsRoute,
  AuthedSiteSiteIdDeploymentsRoute: AuthedSiteSiteIdDeploymentsRoute,
  AuthedTeamTeamIdMembersRoute: AuthedTeamTeamIdMembersRoute,
  AuthedTeamTeamIdSettingsRoute: AuthedTeamTeamIdSettingsRoute,
  AuthedSiteSiteIdIndexRoute: AuthedSiteSiteIdIndexRoute,
  AuthedTeamTeamIdIndexRoute: AuthedTeamTeamIdIndexRoute,
  AuthedSiteSiteIdSettingsRoute: AuthedSiteSiteIdSettingsRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedRouteWithChildren
  '/bootstrap': typeof BootstrapRoute
  '/debug': typeof DebugRoute
  '/login': typeof LoginRoute
  '/': typeof AuthedIndexRoute
  '/settings': typeof AuthedSettingsSRouteWithChildren
  '/site/new': typeof AuthedSiteNewRoute
  '/team/new': typeof AuthedTeamNewRoute
  '/site/$siteId/analytics': typeof AuthedSiteSiteIdAnalyticsRoute
  '/site/$siteId/deployments': typeof AuthedSiteSiteIdDeploymentsRoute
  '/team/$teamId/members': typeof AuthedTeamTeamIdMembersRoute
  '/team/$teamId/settings': typeof AuthedTeamTeamIdSettingsRoute
  '/settings/': typeof AuthedSettingsSIndexRoute
  '/site/$siteId': typeof AuthedSiteSiteIdIndexRoute
  '/team/$teamId': typeof AuthedTeamTeamIdIndexRoute
  '/site/$siteId/settings': typeof AuthedSiteSiteIdSettingsSRouteWithChildren
  '/site/$siteId/settings/actions': typeof AuthedSiteSiteIdSettingsSActionsRoute
  '/site/$siteId/settings/ci': typeof AuthedSiteSiteIdSettingsSCiRoute
  '/site/$siteId/settings/domains': typeof AuthedSiteSiteIdSettingsSDomainsRoute
  '/site/$siteId/settings/keys': typeof AuthedSiteSiteIdSettingsSKeysRoute
  '/site/$siteId/settings/rules': typeof AuthedSiteSiteIdSettingsSRulesRoute
  '/site/$siteId/settings/transfer': typeof AuthedSiteSiteIdSettingsSTransferRoute
  '/site/$siteId/settings/webhooks': typeof AuthedSiteSiteIdSettingsSWebhooksRoute
  '/site/$siteId/settings/': typeof AuthedSiteSiteIdSettingsSIndexRoute
}

export interface FileRoutesByTo {
  '/bootstrap': typeof BootstrapRoute
  '/debug': typeof DebugRoute
  '/login': typeof LoginRoute
  '/': typeof AuthedIndexRoute
  '/settings': typeof AuthedSettingsSIndexRoute
  '/site/new': typeof AuthedSiteNewRoute
  '/team/new': typeof AuthedTeamNewRoute
  '/site/$siteId/analytics': typeof AuthedSiteSiteIdAnalyticsRoute
  '/site/$siteId/deployments': typeof AuthedSiteSiteIdDeploymentsRoute
  '/team/$teamId/members': typeof AuthedTeamTeamIdMembersRoute
  '/team/$teamId/settings': typeof AuthedTeamTeamIdSettingsRoute
  '/site/$siteId': typeof AuthedSiteSiteIdIndexRoute
  '/team/$teamId': typeof AuthedTeamTeamIdIndexRoute
  '/site/$siteId/settings': typeof AuthedSiteSiteIdSettingsSIndexRoute
  '/site/$siteId/settings/actions': typeof AuthedSiteSiteIdSettingsSActionsRoute
  '/site/$siteId/settings/ci': typeof AuthedSiteSiteIdSettingsSCiRoute
  '/site/$siteId/settings/domains': typeof AuthedSiteSiteIdSettingsSDomainsRoute
  '/site/$siteId/settings/keys': typeof AuthedSiteSiteIdSettingsSKeysRoute
  '/site/$siteId/settings/rules': typeof AuthedSiteSiteIdSettingsSRulesRoute
  '/site/$siteId/settings/transfer': typeof AuthedSiteSiteIdSettingsSTransferRoute
  '/site/$siteId/settings/webhooks': typeof AuthedSiteSiteIdSettingsSWebhooksRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/bootstrap': typeof BootstrapRoute
  '/debug': typeof DebugRoute
  '/login': typeof LoginRoute
  '/_authed/': typeof AuthedIndexRoute
  '/_authed/settings': typeof AuthedSettingsRouteWithChildren
  '/_authed/settings/_s': typeof AuthedSettingsSRouteWithChildren
  '/_authed/site/new': typeof AuthedSiteNewRoute
  '/_authed/team/new': typeof AuthedTeamNewRoute
  '/_authed/site/$siteId/analytics': typeof AuthedSiteSiteIdAnalyticsRoute
  '/_authed/site/$siteId/deployments': typeof AuthedSiteSiteIdDeploymentsRoute
  '/_authed/team/$teamId/members': typeof AuthedTeamTeamIdMembersRoute
  '/_authed/team/$teamId/settings': typeof AuthedTeamTeamIdSettingsRoute
  '/_authed/settings/_s/': typeof AuthedSettingsSIndexRoute
  '/_authed/site/$siteId/': typeof AuthedSiteSiteIdIndexRoute
  '/_authed/team/$teamId/': typeof AuthedTeamTeamIdIndexRoute
  '/_authed/site/$siteId/settings': typeof AuthedSiteSiteIdSettingsRouteWithChildren
  '/_authed/site/$siteId/settings/_s': typeof AuthedSiteSiteIdSettingsSRouteWithChildren
  '/_authed/site/$siteId/settings/_s/actions': typeof AuthedSiteSiteIdSettingsSActionsRoute
  '/_authed/site/$siteId/settings/_s/ci': typeof AuthedSiteSiteIdSettingsSCiRoute
  '/_authed/site/$siteId/settings/_s/domains': typeof AuthedSiteSiteIdSettingsSDomainsRoute
  '/_authed/site/$siteId/settings/_s/keys': typeof AuthedSiteSiteIdSettingsSKeysRoute
  '/_authed/site/$siteId/settings/_s/rules': typeof AuthedSiteSiteIdSettingsSRulesRoute
  '/_authed/site/$siteId/settings/_s/transfer': typeof AuthedSiteSiteIdSettingsSTransferRoute
  '/_authed/site/$siteId/settings/_s/webhooks': typeof AuthedSiteSiteIdSettingsSWebhooksRoute
  '/_authed/site/$siteId/settings/_s/': typeof AuthedSiteSiteIdSettingsSIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/bootstrap'
    | '/debug'
    | '/login'
    | '/'
    | '/settings'
    | '/site/new'
    | '/team/new'
    | '/site/$siteId/analytics'
    | '/site/$siteId/deployments'
    | '/team/$teamId/members'
    | '/team/$teamId/settings'
    | '/settings/'
    | '/site/$siteId'
    | '/team/$teamId'
    | '/site/$siteId/settings'
    | '/site/$siteId/settings/actions'
    | '/site/$siteId/settings/ci'
    | '/site/$siteId/settings/domains'
    | '/site/$siteId/settings/keys'
    | '/site/$siteId/settings/rules'
    | '/site/$siteId/settings/transfer'
    | '/site/$siteId/settings/webhooks'
    | '/site/$siteId/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/bootstrap'
    | '/debug'
    | '/login'
    | '/'
    | '/settings'
    | '/site/new'
    | '/team/new'
    | '/site/$siteId/analytics'
    | '/site/$siteId/deployments'
    | '/team/$teamId/members'
    | '/team/$teamId/settings'
    | '/site/$siteId'
    | '/team/$teamId'
    | '/site/$siteId/settings'
    | '/site/$siteId/settings/actions'
    | '/site/$siteId/settings/ci'
    | '/site/$siteId/settings/domains'
    | '/site/$siteId/settings/keys'
    | '/site/$siteId/settings/rules'
    | '/site/$siteId/settings/transfer'
    | '/site/$siteId/settings/webhooks'
  id:
    | '__root__'
    | '/_authed'
    | '/bootstrap'
    | '/debug'
    | '/login'
    | '/_authed/'
    | '/_authed/settings'
    | '/_authed/settings/_s'
    | '/_authed/site/new'
    | '/_authed/team/new'
    | '/_authed/site/$siteId/analytics'
    | '/_authed/site/$siteId/deployments'
    | '/_authed/team/$teamId/members'
    | '/_authed/team/$teamId/settings'
    | '/_authed/settings/_s/'
    | '/_authed/site/$siteId/'
    | '/_authed/team/$teamId/'
    | '/_authed/site/$siteId/settings'
    | '/_authed/site/$siteId/settings/_s'
    | '/_authed/site/$siteId/settings/_s/actions'
    | '/_authed/site/$siteId/settings/_s/ci'
    | '/_authed/site/$siteId/settings/_s/domains'
    | '/_authed/site/$siteId/settings/_s/keys'
    | '/_authed/site/$siteId/settings/_s/rules'
    | '/_authed/site/$siteId/settings/_s/transfer'
    | '/_authed/site/$siteId/settings/_s/webhooks'
    | '/_authed/site/$siteId/settings/_s/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  BootstrapRoute: typeof BootstrapRoute
  DebugRoute: typeof DebugRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  BootstrapRoute: BootstrapRoute,
  DebugRoute: DebugRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed",
        "/bootstrap",
        "/debug",
        "/login"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/",
        "/_authed/settings",
        "/_authed/site/new",
        "/_authed/team/new",
        "/_authed/site/$siteId/analytics",
        "/_authed/site/$siteId/deployments",
        "/_authed/team/$teamId/members",
        "/_authed/team/$teamId/settings",
        "/_authed/site/$siteId/",
        "/_authed/team/$teamId/",
        "/_authed/site/$siteId/settings"
      ]
    },
    "/bootstrap": {
      "filePath": "bootstrap.tsx"
    },
    "/debug": {
      "filePath": "debug.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_authed/": {
      "filePath": "_authed/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/settings": {
      "filePath": "_authed/settings",
      "parent": "/_authed",
      "children": [
        "/_authed/settings/_s"
      ]
    },
    "/_authed/settings/_s": {
      "filePath": "_authed/settings/_s.tsx",
      "parent": "/_authed/settings",
      "children": [
        "/_authed/settings/_s/"
      ]
    },
    "/_authed/site/new": {
      "filePath": "_authed/site/new.tsx",
      "parent": "/_authed"
    },
    "/_authed/team/new": {
      "filePath": "_authed/team/new.tsx",
      "parent": "/_authed"
    },
    "/_authed/site/$siteId/analytics": {
      "filePath": "_authed/site/$siteId/analytics.tsx",
      "parent": "/_authed"
    },
    "/_authed/site/$siteId/deployments": {
      "filePath": "_authed/site/$siteId/deployments.tsx",
      "parent": "/_authed"
    },
    "/_authed/team/$teamId/members": {
      "filePath": "_authed/team/$teamId/members.tsx",
      "parent": "/_authed"
    },
    "/_authed/team/$teamId/settings": {
      "filePath": "_authed/team/$teamId/settings.tsx",
      "parent": "/_authed"
    },
    "/_authed/settings/_s/": {
      "filePath": "_authed/settings/_s.index.tsx",
      "parent": "/_authed/settings/_s"
    },
    "/_authed/site/$siteId/": {
      "filePath": "_authed/site/$siteId/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/team/$teamId/": {
      "filePath": "_authed/team/$teamId/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/site/$siteId/settings": {
      "filePath": "_authed/site/$siteId/settings",
      "parent": "/_authed",
      "children": [
        "/_authed/site/$siteId/settings/_s"
      ]
    },
    "/_authed/site/$siteId/settings/_s": {
      "filePath": "_authed/site/$siteId/settings/_s.tsx",
      "parent": "/_authed/site/$siteId/settings",
      "children": [
        "/_authed/site/$siteId/settings/_s/actions",
        "/_authed/site/$siteId/settings/_s/ci",
        "/_authed/site/$siteId/settings/_s/domains",
        "/_authed/site/$siteId/settings/_s/keys",
        "/_authed/site/$siteId/settings/_s/rules",
        "/_authed/site/$siteId/settings/_s/transfer",
        "/_authed/site/$siteId/settings/_s/webhooks",
        "/_authed/site/$siteId/settings/_s/"
      ]
    },
    "/_authed/site/$siteId/settings/_s/actions": {
      "filePath": "_authed/site/$siteId/settings/_s.actions.tsx",
      "parent": "/_authed/site/$siteId/settings/_s"
    },
    "/_authed/site/$siteId/settings/_s/ci": {
      "filePath": "_authed/site/$siteId/settings/_s.ci.tsx",
      "parent": "/_authed/site/$siteId/settings/_s"
    },
    "/_authed/site/$siteId/settings/_s/domains": {
      "filePath": "_authed/site/$siteId/settings/_s.domains.tsx",
      "parent": "/_authed/site/$siteId/settings/_s"
    },
    "/_authed/site/$siteId/settings/_s/keys": {
      "filePath": "_authed/site/$siteId/settings/_s.keys.tsx",
      "parent": "/_authed/site/$siteId/settings/_s"
    },
    "/_authed/site/$siteId/settings/_s/rules": {
      "filePath": "_authed/site/$siteId/settings/_s.rules.tsx",
      "parent": "/_authed/site/$siteId/settings/_s"
    },
    "/_authed/site/$siteId/settings/_s/transfer": {
      "filePath": "_authed/site/$siteId/settings/_s.transfer.tsx",
      "parent": "/_authed/site/$siteId/settings/_s"
    },
    "/_authed/site/$siteId/settings/_s/webhooks": {
      "filePath": "_authed/site/$siteId/settings/_s.webhooks.tsx",
      "parent": "/_authed/site/$siteId/settings/_s"
    },
    "/_authed/site/$siteId/settings/_s/": {
      "filePath": "_authed/site/$siteId/settings/_s.index.tsx",
      "parent": "/_authed/site/$siteId/settings/_s"
    }
  }
}
ROUTE_MANIFEST_END */
